// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Update User model
model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  phone        String?
  profilePhoto String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  orders  Order[]
  reviews Review[]
}

// Admin Model with different roles
model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String // SUPER_ADMIN, KITCHEN_MANAGER, CUSTOMER_SUPPORT, CONTENT_MANAGER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  logs AdminLog[]
}

// Admin activity logs
model AdminLog {
  id        Int      @id @default(autoincrement())
  adminId   Int
  action    String
  details   String
  createdAt DateTime @default(now())

  // Relations
  admin Admin @relation(fields: [adminId], references: [id])
}

// Dish Categories
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  dishes Dish[]
}

// Dishes/Menu Items
model Dish {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String
  dietary     String?  // Store as comma-separated string
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category     @relation(fields: [categoryId], references: [id])
  ingredients Ingredient[]
  orderItems  OrderItem[]
}

// Ingredients for dishes
model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  optional  Boolean  @default(false)
  price     Float    @default(0) // Additional price if it costs extra
  dishId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  dish Dish @relation(fields: [dishId], references: [id])
}

// Update Order model
model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  status          String // PENDING, PREPARING, READY, DELIVERING, DELIVERED, CANCELLED
  totalAmount     Float
  deliveryAddress String
  deliveryFee     Float
  paymentStatus   String // PENDING, COMPLETED, FAILED
  paymentMethod   String // CASH, CARD, ONLINE
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]
  AuthUser   AuthUser?   @relation(fields: [authUserId], references: [id])
  authUserId Int?
}

// Order Items
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  dishId    Int
  quantity  Int
  price     Float
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  dish  Dish  @relation(fields: [dishId], references: [id])
}

// Update Review model
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  orderId   Int
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
}

// Update AuthUser model
model AuthUser {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  name         String
  role         Role     @default(CUSTOMER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  address      String?
  phone        String?
  profileImage String?

  @@index([email])
}

enum Role {
  CUSTOMER
  RESTAURANT
  ADMIN
}
